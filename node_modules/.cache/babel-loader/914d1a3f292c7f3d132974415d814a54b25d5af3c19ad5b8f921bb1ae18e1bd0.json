{"ast":null,"code":"var _s = $RefreshSig$();\n// reducer.js\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from \"./actionTypes\";\nimport { useNavigate } from \"react-router-dom\";\nconst initialState = {\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")) || []\n};\nexport default function reducer() {\n  _s();\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const navigate = useNavigate();\n  switch (action.type) {\n    case ADD_CONTACT:\n      {\n        let flag = 0;\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert(\"ohh You Missed Required Input , Please fill\");\n          flag = 1;\n        } else {\n          state.contacts.forEach(el => {\n            if (el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert(\"Name Already Exist In Contact\");\n              flag = 1;\n            }\n          });\n        }\n        if (!flag) {\n          alert(\"Contact Saved Successfully!!!\");\n          let updatedContacts = JSON.parse(localStorage.getItem(\"contacts\")) || [];\n          updatedContacts.push({\n            id: state.contacts.length + 1,\n            ...action.payload\n          });\n          localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n          return {\n            ...state,\n            contacts: [\n            // ...state.contacts,\n            // {\n            //   id: state.contacts.length + 1,\n            //  ...action.payload\n            // },\n            ...updatedContacts]\n          };\n        }\n        navigate(\"/\");\n      }\n    case REMOVE_CONTACT:\n      {\n        let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n        let updatedContacts = Contacts.filter(el => el.id != action.payload.id);\n        localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n        return {\n          ...state,\n          contacts: [...updatedContacts]\n        };\n      }\n    case EDIT_CONTACT:\n      {\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert(\"Input Fields Can Not Be Leave Empty\");\n          return state;\n        } else {\n          let flag = 0;\n          let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n          Contacts.forEach(el => {\n            if (el.id != action.payload.id && el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert(\"Name Already Exist!!\");\n              flag = 1;\n              return state;\n            }\n          });\n          if (flag) {\n            return state;\n          } else {\n            let updatedContacts = Contacts.map(el => {\n              if (el.id == action.payload.id) {\n                return el = {\n                  ...action.payload\n                };\n              } else {\n                return el;\n              }\n            });\n            localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n            alert(\"Contact has been Updated\");\n            return {\n              ...state,\n              contacts: state.contacts.map(el => {\n                if (el.id == action.payload.id) {\n                  return el = {\n                    ...action.payload\n                  };\n                } else {\n                  return el;\n                }\n              })\n            };\n          }\n        }\n      }\n    default:\n      return state;\n  }\n}\n_s(reducer, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["ADD_CONTACT","EDIT_CONTACT","REMOVE_CONTACT","useNavigate","initialState","contacts","JSON","parse","localStorage","getItem","reducer","_s","state","arguments","length","undefined","action","navigate","type","flag","payload","first_name","last_name","mob","alert","forEach","el","updatedContacts","push","id","setItem","stringify","Contacts","filter","map"],"sources":["C:/Users/divya.ninan/Desktop/contact-mgnr/contact-mgmt/src/Redux/reducer.js"],"sourcesContent":["// reducer.js\r\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from \"./actionTypes\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst initialState = {\r\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")) || [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  const navigate = useNavigate();\r\n  switch (action.type) {\r\n    case ADD_CONTACT: {\r\n      let flag = 0;\r\n      if (\r\n        action.payload.first_name == \"\" ||\r\n        action.payload.last_name == \"\" ||\r\n        action.payload.mob == \"\"\r\n      ) {\r\n        alert(\"ohh You Missed Required Input , Please fill\");\r\n        flag = 1;\r\n      } else {\r\n        state.contacts.forEach((el) => {\r\n          if (\r\n            el.first_name == action.payload.first_name &&\r\n            el.last_name == action.payload.last_name\r\n          ) {\r\n            alert(\"Name Already Exist In Contact\");\r\n            flag = 1;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!flag) {\r\n        alert(\"Contact Saved Successfully!!!\");\r\n        let updatedContacts =\r\n          JSON.parse(localStorage.getItem(\"contacts\")) || [];\r\n        updatedContacts.push({\r\n          id: state.contacts.length + 1,\r\n          ...action.payload,\r\n        });\r\n        localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n        return {\r\n          ...state,\r\n          contacts: [\r\n            // ...state.contacts,\r\n            // {\r\n            //   id: state.contacts.length + 1,\r\n            //  ...action.payload\r\n            // },\r\n            ...updatedContacts,\r\n          ],\r\n        };\r\n      }\r\n      navigate(\"/\");\r\n    }\r\n\r\n    case REMOVE_CONTACT: {\r\n      let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n      let updatedContacts = Contacts.filter((el) => el.id != action.payload.id);\r\n      localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n      return {\r\n        ...state,\r\n\r\n        contacts: [...updatedContacts],\r\n      };\r\n    }\r\n\r\n    case EDIT_CONTACT: {\r\n      if (\r\n        action.payload.first_name == \"\" ||\r\n        action.payload.last_name == \"\" ||\r\n        action.payload.mob == \"\"\r\n      ) {\r\n        alert(\"Input Fields Can Not Be Leave Empty\");\r\n        return state;\r\n      } else {\r\n        let flag = 0;\r\n        let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n\r\n        Contacts.forEach((el) => {\r\n          if (\r\n            el.id != action.payload.id &&\r\n            el.first_name == action.payload.first_name &&\r\n            el.last_name == action.payload.last_name\r\n          ) {\r\n            alert(\"Name Already Exist!!\");\r\n            flag = 1;\r\n            return state;\r\n          }\r\n        });\r\n\r\n        if (flag) {\r\n          return state;\r\n        } else {\r\n          let updatedContacts = Contacts.map((el) => {\r\n            if (el.id == action.payload.id) {\r\n              return (el = { ...action.payload });\r\n            } else {\r\n              return el;\r\n            }\r\n          });\r\n          localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n          alert(\"Contact has been Updated\");\r\n          return {\r\n            ...state,\r\n\r\n            contacts: state.contacts.map((el) => {\r\n              if (el.id == action.payload.id) {\r\n                return (el = { ...action.payload });\r\n              } else {\r\n                return el;\r\n              }\r\n            }),\r\n          };\r\n        }\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}