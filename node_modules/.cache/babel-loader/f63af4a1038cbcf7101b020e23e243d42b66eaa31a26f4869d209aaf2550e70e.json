{"ast":null,"code":"// reducer.js\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from \"./actionTypes\";\nconst initialState = {\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")) || []\n};\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_CONTACT:\n      {\n        let flag = 0;\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert(\"ohh You Missed Required Input , Please fill\");\n          flag = 1;\n        } else {\n          state.contacts.forEach(el => {\n            if (el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert(\"Name Already Exist In Contact\");\n              flag = 1;\n            }\n          });\n        }\n        if (!flag) {\n          alert(\"Contact Saved Successfully!!!\");\n          let updatedContacts = JSON.parse(localStorage.getItem(\"contacts\")) || [];\n          updatedContacts.push({\n            id: state.contacts.length + 1,\n            ...action.payload\n          });\n          localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n          return {\n            ...state,\n            contacts: [\n            // ...state.contacts,\n            // {\n            //   id: state.contacts.length + 1,\n            //  ...action.payload\n            // },\n            ...updatedContacts]\n          };\n          navigate(\"/\");\n        }\n      }\n    case REMOVE_CONTACT:\n      {\n        let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n        let updatedContacts = Contacts.filter(el => el.id != action.payload.id);\n        localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n        return {\n          ...state,\n          contacts: [...updatedContacts]\n        };\n      }\n    case EDIT_CONTACT:\n      {\n        if (action.payload.first_name == \"\" || action.payload.last_name == \"\" || action.payload.mob == \"\") {\n          alert(\"Input Fields Can Not Be Leave Empty\");\n          return state;\n        } else {\n          let flag = 0;\n          let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\n          Contacts.forEach(el => {\n            if (el.id != action.payload.id && el.first_name == action.payload.first_name && el.last_name == action.payload.last_name) {\n              alert(\"Name Already Exist!!\");\n              flag = 1;\n              return state;\n            }\n          });\n          if (flag) {\n            return state;\n          } else {\n            let updatedContacts = Contacts.map(el => {\n              if (el.id == action.payload.id) {\n                return el = {\n                  ...action.payload\n                };\n              } else {\n                return el;\n              }\n            });\n            localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\n            alert(\"Contact has been Updated\");\n            return {\n              ...state,\n              contacts: state.contacts.map(el => {\n                if (el.id == action.payload.id) {\n                  return el = {\n                    ...action.payload\n                  };\n                } else {\n                  return el;\n                }\n              })\n            };\n          }\n        }\n      }\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_CONTACT","EDIT_CONTACT","REMOVE_CONTACT","initialState","contacts","JSON","parse","localStorage","getItem","reducer","state","arguments","length","undefined","action","type","flag","payload","first_name","last_name","mob","alert","forEach","el","updatedContacts","push","id","setItem","stringify","navigate","Contacts","filter","map"],"sources":["C:/Users/divya.ninan/Desktop/contact-mgnr/contact-mgmt/src/Redux/reducer.js"],"sourcesContent":["// reducer.js\r\nimport { ADD_CONTACT, EDIT_CONTACT, REMOVE_CONTACT } from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  contacts: JSON.parse(localStorage.getItem(\"contacts\")) || [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_CONTACT: {\r\n      let flag = 0;\r\n      if (\r\n        action.payload.first_name == \"\" ||\r\n        action.payload.last_name == \"\" ||\r\n        action.payload.mob == \"\"\r\n      ) {\r\n        alert(\"ohh You Missed Required Input , Please fill\");\r\n        flag = 1;\r\n      } else {\r\n        state.contacts.forEach((el) => {\r\n          if (\r\n            el.first_name == action.payload.first_name &&\r\n            el.last_name == action.payload.last_name\r\n          ) {\r\n            alert(\"Name Already Exist In Contact\");\r\n            flag = 1;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!flag) {\r\n        alert(\"Contact Saved Successfully!!!\");\r\n\r\n        let updatedContacts =\r\n          JSON.parse(localStorage.getItem(\"contacts\")) || [];\r\n        updatedContacts.push({\r\n          id: state.contacts.length + 1,\r\n          ...action.payload,\r\n        });\r\n        localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n        return {\r\n          ...state,\r\n          contacts: [\r\n            // ...state.contacts,\r\n            // {\r\n            //   id: state.contacts.length + 1,\r\n            //  ...action.payload\r\n            // },\r\n            ...updatedContacts,\r\n          ],\r\n        };\r\n        navigate(\"/\");\r\n      }\r\n    }\r\n\r\n    case REMOVE_CONTACT: {\r\n      let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n      let updatedContacts = Contacts.filter((el) => el.id != action.payload.id);\r\n      localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n      return {\r\n        ...state,\r\n\r\n        contacts: [...updatedContacts],\r\n      };\r\n    }\r\n\r\n    case EDIT_CONTACT: {\r\n      if (\r\n        action.payload.first_name == \"\" ||\r\n        action.payload.last_name == \"\" ||\r\n        action.payload.mob == \"\"\r\n      ) {\r\n        alert(\"Input Fields Can Not Be Leave Empty\");\r\n        return state;\r\n      } else {\r\n        let flag = 0;\r\n        let Contacts = JSON.parse(localStorage.getItem(\"contacts\"));\r\n\r\n        Contacts.forEach((el) => {\r\n          if (\r\n            el.id != action.payload.id &&\r\n            el.first_name == action.payload.first_name &&\r\n            el.last_name == action.payload.last_name\r\n          ) {\r\n            alert(\"Name Already Exist!!\");\r\n            flag = 1;\r\n            return state;\r\n          }\r\n        });\r\n\r\n        if (flag) {\r\n          return state;\r\n        } else {\r\n          let updatedContacts = Contacts.map((el) => {\r\n            if (el.id == action.payload.id) {\r\n              return (el = { ...action.payload });\r\n            } else {\r\n              return el;\r\n            }\r\n          });\r\n          localStorage.setItem(\"contacts\", JSON.stringify(updatedContacts));\r\n          alert(\"Contact has been Updated\");\r\n          return {\r\n            ...state,\r\n            contacts: state.contacts.map((el) => {\r\n              if (el.id == action.payload.id) {\r\n                return (el = { ...action.payload });\r\n              } else {\r\n                return el;\r\n              }\r\n            }),\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}